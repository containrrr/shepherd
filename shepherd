#!/bin/bash
set -euo pipefail

log() {
  echo "[$(date)] $1"
}

server_version() {
  docker version -f "{{.Server.Version}}"
}

update_services() {
  local blacklist="$1"
  local supports_detach_option=$2
  local supports_registry_auth=$3
  local detach_option=""
  local registry_auth=""

  [ $supports_detach_option = true ] && detach_option="--detach=false"
  [ $supports_registry_auth = true ] && registry_auth="--with-registry-auth"

  for service in $(IFS="\n" docker service ls --quiet); do
    local name image_with_digest image
    name="$(docker service inspect "$service" -f '{{.Spec.Name}}')"
    if [[ " $blacklist " != *" $name "* ]]; then
      image_with_digest="$(docker service inspect "$service" -f '{{.Spec.TaskTemplate.ContainerSpec.Image}}')"
      image=$(echo "$image_with_digest" | cut -d@ -f1)
      log "Updating service $name with image $image"
      docker service update "$service" $detach_option $registry_auth --image="$image" > /dev/null
    fi
  done
}

main() {
  local blacklist sleep_time supports_detach_option supports_registry_auth
  blacklist="${BLACKLIST_SERVICES:-}"
  sleep_time="${SLEEP_TIME:-5m}"

  supports_detach_option=false
  if [[ "$(server_version)" > "17.05" ]]; then
    supports_detach_option=true
    log "Enabling synchronous service updates"
  fi

  supports_registry_auth=false
  if [[ ${WITH_REGISTRY_AUTH+x} ]]; then
    supports_registry_auth=true
    log "Send registry authentication details to swarm agents"
  fi

  [[ "$blacklist" != "" ]] && echo "Excluding services: $blacklist"

  while true; do
    update_services "$blacklist" "$supports_detach_option" "$supports_registry_auth"
    log "Sleeping $sleep_time before next update"
    sleep "$sleep_time"
  done
}

main "$@"
